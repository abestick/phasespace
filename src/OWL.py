# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Python wrapper module for libowlsock
Generated with SWIG. (http://www.swig.org)
PhaseSpace, Inc. 2012

Usage mirrors the C API with the following differences:

  1) The owlGetXXX functions return SWIG wrapped stl vectors instead of
     accepting an array to fill in.  These vectors will have size zero
     if no data was present (see example code below)

  2) owlGetString returns a python string.

  3) owlGetFloat functions return a float or list of floats.

  4) owlGetInteger functions return an integer or list of ints.

Please consult the C API documentation for further details.

Example Code:

    #!/bin/python
    from OWL import *
    import sys

    # connect to server
    owlInit("192.168.1.200", 0)

    # create a tracker
    tracker = 0
    owlTrackeri(tracker, OWL_CREATE, OWL_POINT_TRACKER)

    # add the points we want to track to the tracker
    for i in range(32):
        owlMarkeri(MARKER(tracker, i), OWL_SET_LED, i)
        pass

    # activate tracker
    owlTracker(tracker, OWL_ENABLE)

    # set frequency
    owlSetFloat(OWL_FREQUENCY, OWL_MAX_FREQUENCY)

    # start streaming
    owlSetInteger(OWL_STREAMING, OWL_ENABLE)

    # check for errors
    if owlGetError() != OWL_NO_ERROR:
        sys.exit(0)
        pass

    # get data
    while(1):
        markers = owlGetMarkers()
        for i in range(markers.size()):
            m = markers[i]
            if m.cond > 0:
                print("%d: %f %f %f" % (m.id, m.x, m.y, m.z))
                pass
            pass
        if owlGetError() != OWL_NO_ERROR:
            sys.exit(0)
            pass
        pass

    # disconnect from server
    owlDone()

"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_OWL', [dirname(__file__)])
        except ImportError:
            import _OWL
            return _OWL
        if fp is not None:
            try:
                _mod = imp.load_module('_OWL', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _OWL = swig_import_helper()
    del swig_import_helper
else:
    import _OWL
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OWL.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _OWL.SwigPyIterator_value(self)
    def incr(self, n = 1): return _OWL.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _OWL.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _OWL.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _OWL.SwigPyIterator_equal(self, *args)
    def copy(self): return _OWL.SwigPyIterator_copy(self)
    def next(self): return _OWL.SwigPyIterator_next(self)
    def __next__(self): return _OWL.SwigPyIterator___next__(self)
    def previous(self): return _OWL.SwigPyIterator_previous(self)
    def advance(self, *args): return _OWL.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _OWL.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _OWL.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _OWL.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _OWL.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _OWL.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _OWL.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _OWL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class stl_vector_owlmarker(_object):
    """Proxy of C++ std::vector<(OWLMarker)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_vector_owlmarker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_vector_owlmarker, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _OWL.stl_vector_owlmarker_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _OWL.stl_vector_owlmarker___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _OWL.stl_vector_owlmarker___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _OWL.stl_vector_owlmarker___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _OWL.stl_vector_owlmarker_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> stl_vector_owlmarker"""
        return _OWL.stl_vector_owlmarker___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, stl_vector_owlmarker v = std::vector< OWLMarker,std::allocator< OWLMarker > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _OWL.stl_vector_owlmarker___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _OWL.stl_vector_owlmarker___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _OWL.stl_vector_owlmarker___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> stl_vector_owlmarker
        __getitem__(self, difference_type i) -> value_type
        """
        return _OWL.stl_vector_owlmarker___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, stl_vector_owlmarker v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _OWL.stl_vector_owlmarker___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _OWL.stl_vector_owlmarker_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _OWL.stl_vector_owlmarker_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _OWL.stl_vector_owlmarker_size(self)

    def clear(self):
        """clear(self)"""
        return _OWL.stl_vector_owlmarker_clear(self)

    def swap(self, *args):
        """swap(self, stl_vector_owlmarker v)"""
        return _OWL.stl_vector_owlmarker_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _OWL.stl_vector_owlmarker_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _OWL.stl_vector_owlmarker_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _OWL.stl_vector_owlmarker_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _OWL.stl_vector_owlmarker_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _OWL.stl_vector_owlmarker_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _OWL.stl_vector_owlmarker_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _OWL.stl_vector_owlmarker_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> stl_vector_owlmarker
        __init__(self, stl_vector_owlmarker arg0) -> stl_vector_owlmarker
        __init__(self, size_type size) -> stl_vector_owlmarker
        __init__(self, size_type size, value_type value) -> stl_vector_owlmarker
        """
        this = _OWL.new_stl_vector_owlmarker(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _OWL.stl_vector_owlmarker_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _OWL.stl_vector_owlmarker_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _OWL.stl_vector_owlmarker_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _OWL.stl_vector_owlmarker_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _OWL.stl_vector_owlmarker_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _OWL.stl_vector_owlmarker_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _OWL.stl_vector_owlmarker_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _OWL.stl_vector_owlmarker_capacity(self)

    __swig_destroy__ = _OWL.delete_stl_vector_owlmarker
    __del__ = lambda self : None;
stl_vector_owlmarker_swigregister = _OWL.stl_vector_owlmarker_swigregister
stl_vector_owlmarker_swigregister(stl_vector_owlmarker)
cvar = _OWL.cvar

class stl_vector_owlrigid(_object):
    """Proxy of C++ std::vector<(OWLRigid)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_vector_owlrigid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_vector_owlrigid, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _OWL.stl_vector_owlrigid_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _OWL.stl_vector_owlrigid___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _OWL.stl_vector_owlrigid___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _OWL.stl_vector_owlrigid___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _OWL.stl_vector_owlrigid_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> stl_vector_owlrigid"""
        return _OWL.stl_vector_owlrigid___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, stl_vector_owlrigid v = std::vector< OWLRigid,std::allocator< OWLRigid > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _OWL.stl_vector_owlrigid___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _OWL.stl_vector_owlrigid___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _OWL.stl_vector_owlrigid___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> stl_vector_owlrigid
        __getitem__(self, difference_type i) -> value_type
        """
        return _OWL.stl_vector_owlrigid___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, stl_vector_owlrigid v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _OWL.stl_vector_owlrigid___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _OWL.stl_vector_owlrigid_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _OWL.stl_vector_owlrigid_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _OWL.stl_vector_owlrigid_size(self)

    def clear(self):
        """clear(self)"""
        return _OWL.stl_vector_owlrigid_clear(self)

    def swap(self, *args):
        """swap(self, stl_vector_owlrigid v)"""
        return _OWL.stl_vector_owlrigid_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _OWL.stl_vector_owlrigid_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _OWL.stl_vector_owlrigid_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _OWL.stl_vector_owlrigid_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _OWL.stl_vector_owlrigid_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _OWL.stl_vector_owlrigid_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _OWL.stl_vector_owlrigid_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _OWL.stl_vector_owlrigid_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> stl_vector_owlrigid
        __init__(self, stl_vector_owlrigid arg0) -> stl_vector_owlrigid
        __init__(self, size_type size) -> stl_vector_owlrigid
        __init__(self, size_type size, value_type value) -> stl_vector_owlrigid
        """
        this = _OWL.new_stl_vector_owlrigid(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _OWL.stl_vector_owlrigid_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _OWL.stl_vector_owlrigid_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _OWL.stl_vector_owlrigid_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _OWL.stl_vector_owlrigid_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _OWL.stl_vector_owlrigid_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _OWL.stl_vector_owlrigid_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _OWL.stl_vector_owlrigid_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _OWL.stl_vector_owlrigid_capacity(self)

    __swig_destroy__ = _OWL.delete_stl_vector_owlrigid
    __del__ = lambda self : None;
stl_vector_owlrigid_swigregister = _OWL.stl_vector_owlrigid_swigregister
stl_vector_owlrigid_swigregister(stl_vector_owlrigid)

class stl_vector_owlcamera(_object):
    """Proxy of C++ std::vector<(OWLCamera)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stl_vector_owlcamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stl_vector_owlcamera, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _OWL.stl_vector_owlcamera_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _OWL.stl_vector_owlcamera___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _OWL.stl_vector_owlcamera___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _OWL.stl_vector_owlcamera___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _OWL.stl_vector_owlcamera_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> stl_vector_owlcamera"""
        return _OWL.stl_vector_owlcamera___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, stl_vector_owlcamera v = std::vector< OWLCamera,std::allocator< OWLCamera > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _OWL.stl_vector_owlcamera___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _OWL.stl_vector_owlcamera___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _OWL.stl_vector_owlcamera___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> stl_vector_owlcamera
        __getitem__(self, difference_type i) -> value_type
        """
        return _OWL.stl_vector_owlcamera___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, stl_vector_owlcamera v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _OWL.stl_vector_owlcamera___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _OWL.stl_vector_owlcamera_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _OWL.stl_vector_owlcamera_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _OWL.stl_vector_owlcamera_size(self)

    def clear(self):
        """clear(self)"""
        return _OWL.stl_vector_owlcamera_clear(self)

    def swap(self, *args):
        """swap(self, stl_vector_owlcamera v)"""
        return _OWL.stl_vector_owlcamera_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _OWL.stl_vector_owlcamera_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _OWL.stl_vector_owlcamera_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _OWL.stl_vector_owlcamera_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _OWL.stl_vector_owlcamera_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _OWL.stl_vector_owlcamera_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _OWL.stl_vector_owlcamera_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _OWL.stl_vector_owlcamera_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> stl_vector_owlcamera
        __init__(self, stl_vector_owlcamera arg0) -> stl_vector_owlcamera
        __init__(self, size_type size) -> stl_vector_owlcamera
        __init__(self, size_type size, value_type value) -> stl_vector_owlcamera
        """
        this = _OWL.new_stl_vector_owlcamera(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _OWL.stl_vector_owlcamera_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _OWL.stl_vector_owlcamera_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _OWL.stl_vector_owlcamera_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _OWL.stl_vector_owlcamera_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _OWL.stl_vector_owlcamera_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _OWL.stl_vector_owlcamera_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _OWL.stl_vector_owlcamera_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _OWL.stl_vector_owlcamera_capacity(self)

    __swig_destroy__ = _OWL.delete_stl_vector_owlcamera
    __del__ = lambda self : None;
stl_vector_owlcamera_swigregister = _OWL.stl_vector_owlcamera_swigregister
stl_vector_owlcamera_swigregister(stl_vector_owlcamera)


def MARKER(*args):
  """MARKER(int tracker, int marker) -> int"""
  return _OWL.MARKER(*args)

def INDEX(*args):
  """INDEX(int id) -> int"""
  return _OWL.INDEX(*args)

def TRACKER(*args):
  """TRACKER(int id) -> int"""
  return _OWL.TRACKER(*args)

def owlSetFloatv(*args):
  """owlSetFloatv(int pname, list floats)"""
  return _OWL.owlSetFloatv(*args)

def owlSetIntegerv(*args):
  """owlSetIntegerv(int pname, list ints)"""
  return _OWL.owlSetIntegerv(*args)

def owlTrackerfv(*args):
  """owlTrackerfv(int tracker, int pname, list float_params)"""
  return _OWL.owlTrackerfv(*args)

def owlTrackeriv(*args):
  """owlTrackeriv(int tracker, int pname, list int_params)"""
  return _OWL.owlTrackeriv(*args)

def owlMarkerfv(*args):
  """owlMarkerfv(int marker, int pname, list float_params)"""
  return _OWL.owlMarkerfv(*args)

def owlMarkeriv(*args):
  """owlMarkeriv(int marker, int pname, list int_params)"""
  return _OWL.owlMarkeriv(*args)

def owlLoadPose(*args):
  """owlLoadPose(list pose)"""
  return _OWL.owlLoadPose(*args)

def owlGetMarkers():
  """owlGetMarkers() -> stl_vector_owlmarker"""
  return _OWL.owlGetMarkers()

def owlGetRigids():
  """owlGetRigids() -> stl_vector_owlrigid"""
  return _OWL.owlGetRigids()

def owlGetCameras():
  """owlGetCameras() -> stl_vector_owlcamera"""
  return _OWL.owlGetCameras()

def owlGetFloatv(*args):
  """owlGetFloatv(int pname)-> list"""
  return _OWL.owlGetFloatv(*args)

def owlGetIntegerv(*args):
  """owlGetIntegerv(int pname) -> list"""
  return _OWL.owlGetIntegerv(*args)

def owlGetString(*args):
  """owlGetString(int pname) -> string"""
  return _OWL.owlGetString(*args)
class CommDataAccumulator:
    def __init__(self):
        self.bd = BaseData()
        pass
    def ParseTimecode(self, data):
        ret = _parse_timecode(self.bd, data)
        return ret
    pass

class BaseData(_object):
    """Proxy of C++ BaseData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["baseDataFlag"] = _OWL.BaseData_baseDataFlag_set
    __swig_getmethods__["baseDataFlag"] = _OWL.BaseData_baseDataFlag_get
    if _newclass:baseDataFlag = _swig_property(_OWL.BaseData_baseDataFlag_get, _OWL.BaseData_baseDataFlag_set)
    __swig_setmethods__["baseDataStamp"] = _OWL.BaseData_baseDataStamp_set
    __swig_getmethods__["baseDataStamp"] = _OWL.BaseData_baseDataStamp_get
    if _newclass:baseDataStamp = _swig_property(_OWL.BaseData_baseDataStamp_get, _OWL.BaseData_baseDataStamp_set)
    __swig_setmethods__["prevData"] = _OWL.BaseData_prevData_set
    __swig_getmethods__["prevData"] = _OWL.BaseData_prevData_get
    if _newclass:prevData = _swig_property(_OWL.BaseData_prevData_get, _OWL.BaseData_prevData_set)
    def __init__(self): 
        """__init__(self) -> BaseData"""
        this = _OWL.new_BaseData()
        try: self.this.append(this)
        except: self.this = this
    def Print(self, *args):
        """Print(self, Data base, std::ostream out) -> int"""
        return _OWL.BaseData_Print(self, *args)

    __swig_destroy__ = _OWL.delete_BaseData
    __del__ = lambda self : None;
BaseData_swigregister = _OWL.BaseData_swigregister
BaseData_swigregister(BaseData)


def _parse_timecode(*args):
  """_parse_timecode(BaseData bd, PyObject commdata) -> PyObject"""
  return _OWL._parse_timecode(*args)
OWL_API_VERSION = _OWL.OWL_API_VERSION
class OWLMarker(_object):
    """Proxy of C++ OWLMarker class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OWLMarker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OWLMarker, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _OWL.OWLMarker_id_set
    __swig_getmethods__["id"] = _OWL.OWLMarker_id_get
    if _newclass:id = _swig_property(_OWL.OWLMarker_id_get, _OWL.OWLMarker_id_set)
    __swig_setmethods__["frame"] = _OWL.OWLMarker_frame_set
    __swig_getmethods__["frame"] = _OWL.OWLMarker_frame_get
    if _newclass:frame = _swig_property(_OWL.OWLMarker_frame_get, _OWL.OWLMarker_frame_set)
    __swig_setmethods__["x"] = _OWL.OWLMarker_x_set
    __swig_getmethods__["x"] = _OWL.OWLMarker_x_get
    if _newclass:x = _swig_property(_OWL.OWLMarker_x_get, _OWL.OWLMarker_x_set)
    __swig_setmethods__["y"] = _OWL.OWLMarker_y_set
    __swig_getmethods__["y"] = _OWL.OWLMarker_y_get
    if _newclass:y = _swig_property(_OWL.OWLMarker_y_get, _OWL.OWLMarker_y_set)
    __swig_setmethods__["z"] = _OWL.OWLMarker_z_set
    __swig_getmethods__["z"] = _OWL.OWLMarker_z_get
    if _newclass:z = _swig_property(_OWL.OWLMarker_z_get, _OWL.OWLMarker_z_set)
    __swig_setmethods__["cond"] = _OWL.OWLMarker_cond_set
    __swig_getmethods__["cond"] = _OWL.OWLMarker_cond_get
    if _newclass:cond = _swig_property(_OWL.OWLMarker_cond_get, _OWL.OWLMarker_cond_set)
    __swig_setmethods__["flag"] = _OWL.OWLMarker_flag_set
    __swig_getmethods__["flag"] = _OWL.OWLMarker_flag_get
    if _newclass:flag = _swig_property(_OWL.OWLMarker_flag_get, _OWL.OWLMarker_flag_set)
    def __init__(self): 
        """__init__(self) -> OWLMarker"""
        this = _OWL.new_OWLMarker()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OWL.delete_OWLMarker
    __del__ = lambda self : None;
OWLMarker_swigregister = _OWL.OWLMarker_swigregister
OWLMarker_swigregister(OWLMarker)

class OWLRigid(_object):
    """Proxy of C++ OWLRigid class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OWLRigid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OWLRigid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _OWL.OWLRigid_id_set
    __swig_getmethods__["id"] = _OWL.OWLRigid_id_get
    if _newclass:id = _swig_property(_OWL.OWLRigid_id_get, _OWL.OWLRigid_id_set)
    __swig_setmethods__["frame"] = _OWL.OWLRigid_frame_set
    __swig_getmethods__["frame"] = _OWL.OWLRigid_frame_get
    if _newclass:frame = _swig_property(_OWL.OWLRigid_frame_get, _OWL.OWLRigid_frame_set)
    __swig_setmethods__["pose"] = _OWL.OWLRigid_pose_set
    __swig_getmethods__["pose"] = _OWL.OWLRigid_pose_get
    if _newclass:pose = _swig_property(_OWL.OWLRigid_pose_get, _OWL.OWLRigid_pose_set)
    __swig_setmethods__["cond"] = _OWL.OWLRigid_cond_set
    __swig_getmethods__["cond"] = _OWL.OWLRigid_cond_get
    if _newclass:cond = _swig_property(_OWL.OWLRigid_cond_get, _OWL.OWLRigid_cond_set)
    __swig_setmethods__["flag"] = _OWL.OWLRigid_flag_set
    __swig_getmethods__["flag"] = _OWL.OWLRigid_flag_get
    if _newclass:flag = _swig_property(_OWL.OWLRigid_flag_get, _OWL.OWLRigid_flag_set)
    def __init__(self): 
        """__init__(self) -> OWLRigid"""
        this = _OWL.new_OWLRigid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OWL.delete_OWLRigid
    __del__ = lambda self : None;
OWLRigid_swigregister = _OWL.OWLRigid_swigregister
OWLRigid_swigregister(OWLRigid)

class OWLCamera(_object):
    """Proxy of C++ OWLCamera class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OWLCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OWLCamera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _OWL.OWLCamera_id_set
    __swig_getmethods__["id"] = _OWL.OWLCamera_id_get
    if _newclass:id = _swig_property(_OWL.OWLCamera_id_get, _OWL.OWLCamera_id_set)
    __swig_setmethods__["pose"] = _OWL.OWLCamera_pose_set
    __swig_getmethods__["pose"] = _OWL.OWLCamera_pose_get
    if _newclass:pose = _swig_property(_OWL.OWLCamera_pose_get, _OWL.OWLCamera_pose_set)
    __swig_setmethods__["cond"] = _OWL.OWLCamera_cond_set
    __swig_getmethods__["cond"] = _OWL.OWLCamera_cond_get
    if _newclass:cond = _swig_property(_OWL.OWLCamera_cond_get, _OWL.OWLCamera_cond_set)
    __swig_setmethods__["flag"] = _OWL.OWLCamera_flag_set
    __swig_getmethods__["flag"] = _OWL.OWLCamera_flag_get
    if _newclass:flag = _swig_property(_OWL.OWLCamera_flag_get, _OWL.OWLCamera_flag_set)
    def __init__(self): 
        """__init__(self) -> OWLCamera"""
        this = _OWL.new_OWLCamera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OWL.delete_OWLCamera
    __del__ = lambda self : None;
OWLCamera_swigregister = _OWL.OWLCamera_swigregister
OWLCamera_swigregister(OWLCamera)

class OWLEvent(_object):
    """Proxy of C++ OWLEvent class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OWLEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OWLEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _OWL.OWLEvent_type_set
    __swig_getmethods__["type"] = _OWL.OWLEvent_type_get
    if _newclass:type = _swig_property(_OWL.OWLEvent_type_get, _OWL.OWLEvent_type_set)
    __swig_setmethods__["frame"] = _OWL.OWLEvent_frame_set
    __swig_getmethods__["frame"] = _OWL.OWLEvent_frame_get
    if _newclass:frame = _swig_property(_OWL.OWLEvent_frame_get, _OWL.OWLEvent_frame_set)
    def __init__(self): 
        """__init__(self) -> OWLEvent"""
        this = _OWL.new_OWLEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _OWL.delete_OWLEvent
    __del__ = lambda self : None;
OWLEvent_swigregister = _OWL.OWLEvent_swigregister
OWLEvent_swigregister(OWLEvent)

OWL_MAX_FREQUENCY = _OWL.OWL_MAX_FREQUENCY
OWL_NO_ERROR = _OWL.OWL_NO_ERROR
OWL_INVALID_VALUE = _OWL.OWL_INVALID_VALUE
OWL_INVALID_ENUM = _OWL.OWL_INVALID_ENUM
OWL_INVALID_OPERATION = _OWL.OWL_INVALID_OPERATION
OWL_DONE = _OWL.OWL_DONE
OWL_CREATE = _OWL.OWL_CREATE
OWL_DESTROY = _OWL.OWL_DESTROY
OWL_ENABLE = _OWL.OWL_ENABLE
OWL_DISABLE = _OWL.OWL_DISABLE
OWL_SLAVE = _OWL.OWL_SLAVE
OWL_FILE = _OWL.OWL_FILE
OWL_ASYNC = _OWL.OWL_ASYNC
OWL_POSTPROCESS = _OWL.OWL_POSTPROCESS
OWL_MODE1 = _OWL.OWL_MODE1
OWL_MODE2 = _OWL.OWL_MODE2
OWL_MODE3 = _OWL.OWL_MODE3
OWL_MODE4 = _OWL.OWL_MODE4
OWL_LASER = _OWL.OWL_LASER
OWL_CALIB = _OWL.OWL_CALIB
OWL_DIAGNOSTIC = _OWL.OWL_DIAGNOSTIC
OWL_CALIBPLANAR = _OWL.OWL_CALIBPLANAR
OWL_FREQUENCY = _OWL.OWL_FREQUENCY
OWL_STREAMING = _OWL.OWL_STREAMING
OWL_INTERPOLATION = _OWL.OWL_INTERPOLATION
OWL_BROADCAST = _OWL.OWL_BROADCAST
OWL_EVENTS = _OWL.OWL_EVENTS
OWL_BUTTONS = _OWL.OWL_BUTTONS
OWL_MARKERS = _OWL.OWL_MARKERS
OWL_RIGIDS = _OWL.OWL_RIGIDS
OWL_COMMDATA = _OWL.OWL_COMMDATA
OWL_TIMESTAMP = _OWL.OWL_TIMESTAMP
OWL_PLANES = _OWL.OWL_PLANES
OWL_DETECTORS = _OWL.OWL_DETECTORS
OWL_PEAKS = _OWL.OWL_PEAKS
OWL_IMAGES = _OWL.OWL_IMAGES
OWL_CAMERAS = _OWL.OWL_CAMERAS
OWL_FRAME_BUFFER_SIZE = _OWL.OWL_FRAME_BUFFER_SIZE
OWL_MARKER_STATS = _OWL.OWL_MARKER_STATS
OWL_CAMERA_STATS = _OWL.OWL_CAMERA_STATS
OWL_MARKER_COVARIANCE = _OWL.OWL_MARKER_COVARIANCE
OWL_HW_CONFIG = _OWL.OWL_HW_CONFIG
OWL_TRANSFORM = _OWL.OWL_TRANSFORM
OWL_POINT_TRACKER = _OWL.OWL_POINT_TRACKER
OWL_RIGID_TRACKER = _OWL.OWL_RIGID_TRACKER
OWL_PLANAR_TRACKER = _OWL.OWL_PLANAR_TRACKER
OWL_SET_FILTER = _OWL.OWL_SET_FILTER
OWL_FEATURE0 = _OWL.OWL_FEATURE0
OWL_FEATURE1 = _OWL.OWL_FEATURE1
OWL_FEATURE2 = _OWL.OWL_FEATURE2
OWL_FEATURE3 = _OWL.OWL_FEATURE3
OWL_FEATURE4 = _OWL.OWL_FEATURE4
OWL_FEATURE5 = _OWL.OWL_FEATURE5
OWL_FEATURE6 = _OWL.OWL_FEATURE6
OWL_FEATURE7 = _OWL.OWL_FEATURE7
OWL_FEATURE8 = _OWL.OWL_FEATURE8
OWL_FEATURE9 = _OWL.OWL_FEATURE9
OWL_FEATURE10 = _OWL.OWL_FEATURE10
OWL_FEATURE11 = _OWL.OWL_FEATURE11
OWL_FEATURE12 = _OWL.OWL_FEATURE12
OWL_FEATURE_LAST = _OWL.OWL_FEATURE_LAST
OWL_CALIB_TRACKER = _OWL.OWL_CALIB_TRACKER
OWL_CALIB_RESET = _OWL.OWL_CALIB_RESET
OWL_CALIB_LOAD = _OWL.OWL_CALIB_LOAD
OWL_CALIB_SAVE = _OWL.OWL_CALIB_SAVE
OWL_CALIBRATE = _OWL.OWL_CALIBRATE
OWL_RECALIBRATE = _OWL.OWL_RECALIBRATE
OWL_CAPTURE_RESET = _OWL.OWL_CAPTURE_RESET
OWL_CAPTURE_START = _OWL.OWL_CAPTURE_START
OWL_CAPTURE_STOP = _OWL.OWL_CAPTURE_STOP
OWL_CALIB_ACTIVE = _OWL.OWL_CALIB_ACTIVE
OWL_CALIBPL_TRACKER = _OWL.OWL_CALIBPL_TRACKER
OWL_SET_LED = _OWL.OWL_SET_LED
OWL_SET_POSITION = _OWL.OWL_SET_POSITION
OWL_CLEAR_MARKER = _OWL.OWL_CLEAR_MARKER
OWL_VERSION = _OWL.OWL_VERSION
OWL_FRAME_NUMBER = _OWL.OWL_FRAME_NUMBER
OWL_STATUS_STRING = _OWL.OWL_STATUS_STRING
OWL_CUSTOM_STRING = _OWL.OWL_CUSTOM_STRING
OWL_CALIB_STATUS = _OWL.OWL_CALIB_STATUS
OWL_CALIB_ERROR = _OWL.OWL_CALIB_ERROR

def owlInit(*args):
  """owlInit(string server, int flags) -> int"""
  return _OWL.owlInit(*args)

def owlDone():
  """owlDone()"""
  return _OWL.owlDone()

def owlSetFloat(*args):
  """owlSetFloat(int pname, float param)"""
  return _OWL.owlSetFloat(*args)

def owlSetInteger(*args):
  """owlSetInteger(int pname, int param)"""
  return _OWL.owlSetInteger(*args)

def owlSetString(*args):
  """owlSetString(int pname, string str)"""
  return _OWL.owlSetString(*args)

def owlTracker(*args):
  """owlTracker(int tracker, int pname)"""
  return _OWL.owlTracker(*args)

def owlTrackerf(*args):
  """owlTrackerf(int tracker, int pname, float param)"""
  return _OWL.owlTrackerf(*args)

def owlTrackeri(*args):
  """owlTrackeri(int tracker, int pname, int param)"""
  return _OWL.owlTrackeri(*args)

def owlMarker(*args):
  """owlMarker(int marker, int pname)"""
  return _OWL.owlMarker(*args)

def owlMarkerf(*args):
  """owlMarkerf(int marker, int pname, float param)"""
  return _OWL.owlMarkerf(*args)

def owlMarkeri(*args):
  """owlMarkeri(int marker, int pname, int param)"""
  return _OWL.owlMarkeri(*args)

def owlScale(*args):
  """owlScale(float scale)"""
  return _OWL.owlScale(*args)

def owlGetStatus():
  """owlGetStatus() -> int"""
  return _OWL.owlGetStatus()

def owlGetError():
  """owlGetError() -> int"""
  return _OWL.owlGetError()

def owlPeekEvent():
  """owlPeekEvent() -> OWLEvent"""
  return _OWL.owlPeekEvent()

def owlGetEvent():
  """owlGetEvent() -> OWLEvent"""
  return _OWL.owlGetEvent()
# This file is compatible with both classic and new-style classes.



if __name__ == '__main__':
    from OWL import *
    import sys

    # connect to server
    owlInit("192.168.1.120", 0)

    # create a tracker
    tracker = 0
    owlTrackeri(tracker, OWL_CREATE, OWL_POINT_TRACKER)

    # add the points we want to track to the tracker
    for i in range(32):
        owlMarkeri(MARKER(tracker, i), OWL_SET_LED, i)
        pass

    # activate tracker
    owlTracker(tracker, OWL_ENABLE)

    # set frequency
    owlSetFloat(OWL_FREQUENCY, 50)

    # start streaming
    owlSetInteger(OWL_STREAMING, OWL_ENABLE)

    # check for errors
    if owlGetError() != OWL_NO_ERROR:
        sys.exit(0)
        pass

    # get data
    while(1):
        markers = owlGetMarkers()
        print(markers.size())
        for i in range(markers.size()):
            m = markers[i]
            if m.cond > 0:
                #print("%d: %f %f %f" % (m.id, m.x, m.y, m.z))
                pass
            pass
        if owlGetError() != OWL_NO_ERROR:
            sys.exit(0)
            pass
        pass

    # disconnect from server
    owlDone()
